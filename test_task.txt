**Task:** Implement a linear search algorithm that finds the first occurrence of a target value in a given vector using ONLY sequential element inspection.

**Input:**  
- A vector `a` of length `n` (0-indexed).  
- A target value `x` to search for.

**Allowed operations:**  
- Iterate through the vector from index `0` to `n-1`.  
- Compare `a[i]` with `x` at each step.  
- Stop immediately upon finding the first match.

**Strict constraints:**  
- No built-in search functions (e.g., `list.index()`, `in`, `filter`, etc.) are allowed.  
- No slicing, list comprehensions for searching, or external libraries.  
- The search must be strictly linear and sequentialâ€”no skipping, hashing, or binary search logic.  
- If the target is not found, return `-1`.

**Critical clarification:**  
- The algorithm must return the **index of the first occurrence** of `x` in `a`, or `-1` if absent.  
- The search must inspect elements **in order from left to right**, without any pre-processing of the input.

**Requirements:**  
1. Implement a function `solve(vector, target)` that returns the index of the first occurrence of `target` in `vector`, or `-1` if not found.  
2. Include a CLI interface:  
   - When the script is executed directly, it should accept **two command-line arguments**:  
     - The vector as a JSON-formatted string (e.g., `"[3,1,2,5,4]"`)  
     - The target as a JSON value (e.g., `"2"` or `"\"hello\""` for strings)  
   - The output must be a **JSON object** with keys `"index"` (integer) and `"found"` (boolean).  
3. Include a minimal example in the `__main__` block for quick testing.  
4. The code must be fully self-contained and executable without external dependencies.  
5. JSON output must always be structured and parseable for automated testing.

**Example expected usage:**

```bash
python linear_search.py "[3,1,2,5,4]" 2
```

**Expected output:**
```json
{"index": 2, "found": true}
```

**Another example:**
```bash
python linear_search.py "[3,1,2,5,4]" 7
```

**Expected output:**
```json
{"index": -1, "found": false}
```

