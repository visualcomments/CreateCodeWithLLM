import json
import pandas as pd
import matplotlib.pyplot as plt
import os
import glob
from collections import Counter

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
RESULTS_FOLDER = '–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
REPORT_FILENAME = 'benchmark_analysis_report.txt'
PIE_CHART_FILENAME = 'benchmark_pie_chart.png'
BAR_CHART_FILENAME = 'benchmark_top5_performance.png'
TOP_N_MODELS = 5
# ---

def find_latest_results_file(folder: str) -> str | None:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ JSON-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –ø–∞–ø–∫–µ."""
    list_of_files = glob.glob(os.path.join(folder, 'final_results_*.json'))
    if not list_of_files:
        return None
    latest_file = max(list_of_files, key=os.path.getctime)
    return latest_file

def load_and_parse_data(filepath: str) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª –∏ –ø–∞—Ä—Å–∏—Ç –µ–≥–æ –≤ DataFrame.
    –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON: { 'model_name': {'final_test': {...}, ...} }
    """
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª {filepath}. {e}")
        return pd.DataFrame()

    parsed_data = []
    for model_name, results in data.items():
        final_test = results.get('final_test', {})
        success = final_test.get('success', False)
        summary = final_test.get('summary', {})
        
        if success:
            # –î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –±–µ—Ä–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            avg_time = summary.get('avg_time', float('inf'))
            max_mem = summary.get('max_memory_kb')
            issue = "Success"
        else:
            # –î–ª—è –ø—Ä–æ–≤–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–∏–º 'inf' –∏ –±–µ—Ä–µ–º –ø—Ä–∏—á–∏–Ω—É
            avg_time = float('inf')
            max_mem = None
            issue = final_test.get('issue', 'Unknown Error')
            
            # –£–ø—Ä–æ—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ (—á–∞—Å—Ç–æ —ç—Ç–æ JSON —Å —Ç–µ—Å—Ç–∞–º–∏)
            if isinstance(issue, str) and issue.startswith('{'):
                try:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤—É—é –ø—Ä–∏—á–∏–Ω—É —Å–±–æ—è
                    issue_json = json.loads(issue)
                    first_fail = issue_json.get('failing_cases', [{}])[0]
                    issue = first_fail.get('error', 'Test mismatch')
                except json.JSONDecodeError:
                    issue = "Test mismatch (JSON output)" # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON

        parsed_data.append({
            'Model': model_name,
            'Success': success,
            'Avg_Time (s)': avg_time,
            'Max_Memory (KB)': max_mem,
            'Result_Details': issue
        })
        
    return pd.DataFrame(parsed_data)

def generate_report(df: pd.DataFrame):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç, —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏.
    """
    if df.empty:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    # --- 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    total_models = len(df)
    successful_df = df[df['Success'] == True].sort_values(by='Avg_Time (s)')
    failed_df = df[df['Success'] == False]
    
    success_count = len(successful_df)
    fail_count = len(failed_df)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º
    error_counts = Counter(failed_df['Result_Details'])
    
    # --- 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–∏ –≤ —Ñ–∞–π–ª, –∏ –≤ –∫–æ–Ω—Å–æ–ª—å) ---
    report_lines = []
    report_lines.append("="*80)
    report_lines.append("                –û–¢–ß–ï–¢ –ü–û –ë–ï–ù–ß–ú–ê–†–ö–£ –†–ï–ê–õ–ò–ó–ê–¶–ò–ô –ê–õ–ì–û–†–ò–¢–ú–ê LRX")
    report_lines.append("="*80)
    report_lines.append("\n## 1. –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π\n")
    report_lines.append("–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:")
    report_lines.append("  1. **–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å (Success = True):** –°–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π. –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞")
    report_lines.append("     –ø—Ä–æ–π—Ç–∏ *–≤—Å–µ* —Ç–µ—Å—Ç—ã, –≤–∫–ª—é—á–∞—è –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ (–ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏, n=1, n=2).")
    report_lines.append("  2. **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (Avg_Time):** –°—Ä–µ–¥–∏ *–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö* –º–æ–¥–µ–ª–µ–π,")
    report_lines.append("     –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–¥–∞–µ—Ç—Å—è —Ç–µ–º, —á–µ–π –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ.")
    report_lines.append("  3. **–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (Max_Memory):** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏")
    report_lines.append("     —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤ –¥–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ –º–µ–Ω–µ–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–Ω, —á–µ–º –≤—Ä–µ–º—è).\n")

    report_lines.append("---")
    report_lines.append("## 2. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n")
    
    summary_table = pd.DataFrame({
        '–ú–µ—Ç—Ä–∏–∫–∞': ['–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π', '–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç', '–ü—Ä–æ–≤–∞–ª–∏–ª–∏ —Ç–µ—Å—Ç'],
        '–ó–Ω–∞—á–µ–Ω–∏–µ': [total_models, success_count, fail_count]
    })
    report_lines.append(summary_table.to_string(index=False))
    report_lines.append("\n")

    # --- 3. –í—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ ---
    report_lines.append("---")
    report_lines.append("## 3. –í—ã–±–æ—Ä –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏\n")
    if not successful_df.empty:
        best_model = successful_df.iloc[0]
        report_lines.append(f"üèÜ **–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model['Model']}** üèÜ\n")
        report_lines.append("–û–Ω–∞ –ø–æ–∫–∞–∑–∞–ª–∞ –Ω–∞–∏–ª—É—á—à–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π.\n")
        report_lines.append(f"  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {best_model['Avg_Time (s)']:.6f} —Å–µ–∫.")
        report_lines.append(f"  - –ú–∞–∫—Å. –ø–∞–º—è—Ç—å: {best_model['Max_Memory (KB)']} KB\n")
    else:
        report_lines.append("‚ùå **–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.**\n")
        report_lines.append("–ù–∏ –æ–¥–Ω–∞ –∏–∑ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤.\n")

    # --- 4. –¢–æ–ø N —É—Å–ø–µ—à–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (—Ç–∞–±–ª–∏—Ü–∞) ---
    if not successful_df.empty:
        report_lines.append("---")
        report_lines.append(f"## 4. –¢–æ–ø-{TOP_N_MODELS} —É—Å–ø–µ—à–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)\n")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞
        top_n_df = successful_df.head(TOP_N_MODELS).copy()
        top_n_df['Avg_Time (s)'] = top_n_df['Avg_Time (s)'].map('{:,.6f}'.format)
        top_n_df['Max_Memory (KB)'] = top_n_df['Max_Memory (KB)'].map('{:,.0f}'.format)
        top_n_df.drop(columns=['Success', 'Result_Details'], inplace=True)
        top_n_df.reset_index(drop=True, inplace=True)
        top_n_df.index = top_n_df.index + 1
        top_n_df.index.name = "Rank"
        
        report_lines.append(top_n_df.to_string())
        report_lines.append("\n")
    
    # --- 5. –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ (—Ç–∞–±–ª–∏—Ü–∞) ---
    if not failed_df.empty:
        report_lines.append("---")
        report_lines.append("## 5. –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω —Å–±–æ–µ–≤\n")
        
        error_df = pd.DataFrame(error_counts.items(), columns=['–ü—Ä–∏—á–∏–Ω–∞ —Å–±–æ—è', '–ö–æ–ª-–≤–æ –º–æ–¥–µ–ª–µ–π'])
        error_df = error_df.sort_values(by='–ö–æ–ª-–≤–æ –º–æ–¥–µ–ª–µ–π', ascending=False)
        error_df.reset_index(drop=True, inplace=True)
        
        report_lines.append(error_df.to_string(index=False))
        report_lines.append("\n")

    report_lines.append("="*80)
    report_lines.append(f"–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {REPORT_FILENAME}")
    report_lines.append(f"–ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {PIE_CHART_FILENAME}, {BAR_CHART_FILENAME}")
    report_lines.append("="*80)

    # --- 6. –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª ---
    report_text = "\n".join(report_lines)
    print(report_text)
    
    try:
        with open(REPORT_FILENAME, 'w', encoding='utf-8') as f:
            f.write(report_text)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç: {e}")

    # --- 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (Success vs Fail)
    try:
        plt.figure(figsize=(8, 6))