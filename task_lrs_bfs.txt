Task: Implement a sorting algorithm that sorts a given vector using ONLY allowed moves (L, R, X).

Input: A vector a of length n (0-indexed) containing distinct integers (permutations are assumed for simplicity).

Allowed moves:
L: Left cyclic shift — shifts all elements one position to the left, with the first element moving to the end. Example: [1,2,3,4] -> [2,3,4,1].
R: Right cyclic shift — shifts all elements one position to the right, with the last element moving to the beginning. Example: [1,2,3,4] -> [4,1,2,3].
X: Transposition of the first two elements — swaps the elements at positions 0 and 1. Example: [1,2,3,4] -> [2,1,3,4].

Strict constraints:
- No other operations, slicing, built-in sorting functions, or creating new arrays are allowed (except for a copy to simulate sorting).
- All moves must be appended to the moves list immediately after performing them (as strings: 'L', 'R', or 'X').
- Applying the sequence of moves sequentially to a copy of the input vector must yield a fully sorted ascending array.
- Moves can be used multiple times as needed during the sorting process.
- The sorting algorithm must continue applying moves until the array is fully sorted.
- The algorithm should be efficient and find a sequence of moves that sorts the array (it represents a path in the Cayley graph generated by these moves).

Description of moves (Cayley graph):
- These moves generate a Cayley graph where vertices are all possible permutations of the vector (for n elements, there are n! vertices).
- Edges correspond to applying one of the generators: L (left shift), R (right shift), or X (swap first two).
- The sorting task is equivalent to finding a path from the input permutation to the sorted (identity) permutation in this Cayley graph.
- Your algorithm must compute such a path as a sequence of moves.

Requirements:
- Implement a function solve(vector) that returns a tuple (moves, sorted_array):
    - moves is a list of strings representing all moves performed (e.g., ['L', 'X', 'R', ...]).
    - sorted_array is the final sorted array after applying all moves to a copy of the input vector.
- The algorithm must be a sorting algorithm that uses only L, R, X to transform the vector into sorted order (e.g., an adaptation of a search-based sorter like BFS for shortest path in the Cayley graph, or a heuristic sorter).
- Include a CLI interface:
    - When the script is executed directly, it should accept a vector as a command-line argument (parse sys.argv[1] as JSON). Use [3, 1, 2] as a fallback if no arg is given.
    - The output should be a JSON object with keys "moves" and "sorted_array".
- Include a minimal example in the main block for quick testing.
- The code must be fully self-contained and executable without external dependencies.
- JSON output must always be structured and parseable for automated testing.

Example expected usage:
    python solve_module.py "[3,1,2,5,4]"

Example output (hypothetical for input [3,1,2]):
{
    "moves": ["X", "L", "R", "X"],
    "sorted_array": [1,2,3]
}